package main

import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/jackc/pgx/v5"
)

const DATABASE_URL = "postgres://postgres:postgres@localhost:5432/postgres"

func main() {
	ctx, cancel := context.WithTimeout(context.Background(), 2*time.Minute)
	defer cancel()

	conn, err := pgx.Connect(ctx, DATABASE_URL)
	if err != nil {
		log.Fatal("Unable to establish connection:", err)
	}

	_, err = conn.Exec(ctx, `
	create temporary table products (
		id int primary key generated by default as identity,
		name text not null,
		price int not null
	);

	insert into products (name, price) values
		('Cheeseburger', 10),
		('Double Cheeseburger', 14),
		('Fries', 5),
		('Soft Drink', 3);
	`)
	if err != nil {
		log.Fatal("Unable to setup example schema and data:", err)
	}

	type product struct {
		ID    int32
		Name  string
		Price int32
	}

	rows, _ := conn.Query(ctx, "select * from products where price < $1 order by price desc", 12)
	products, err := pgx.CollectRows(rows, pgx.RowToStructByPos[product])
	if err != nil {
		log.Fatal("CollectRows error:", err)
	}

	for _, p := range products {
		fmt.Printf("%s: $%d\n", p.Name, p.Price)
	}
}
